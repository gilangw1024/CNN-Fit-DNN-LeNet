# -*- coding: utf-8 -*-
"""Latihan CNN dengan LenNet save

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jz7GZgWwB6m1oXO3xeQ-w0rDtphK6LrB

Import Library dan Download data
"""

from tensorflow.keras import datasets, models, layers
import tensorflow as tf
import numpy as np

# Load MNIST
(X_train, y_train), (X_test, y_test) = datasets.mnist.load_data()

"""**Preprocessing Data**"""

# Tambahkan channel (grayscale → 1 channel)
X_train = np.expand_dims(X_train, axis=-1)  # (60000, 28, 28, 1)
X_test = np.expand_dims(X_test, axis=-1)

# Resize ke 32x32 (LeNet butuh input 32x32)
X_train = tf.image.resize(X_train, [32, 32])
X_test = tf.image.resize(X_test, [32, 32])

# Normalisasi ke 0–1 dan pastikan float32
X_train = X_train / 255.0
X_test = X_test / 255.0
X_train = tf.cast(X_train, tf.float32)
X_test = tf.cast(X_test, tf.float32)

"""**Bangun Model LeNet**"""

model5 = models.Sequential([
    layers.Input(shape=(32, 32, 1)),
    layers.Conv2D(6, kernel_size=(5, 5), activation='tanh'),
    layers.AveragePooling2D(pool_size=(2, 2)),
    layers.Conv2D(16, kernel_size=(5, 5), activation='tanh'),
    layers.AveragePooling2D(pool_size=(2, 2)),
    layers.Flatten(),
    layers.Dense(120, activation='tanh'),
    layers.Dense(84, activation='tanh'),
    layers.Dense(10, activation='softmax')
])

"""Optimasi"""

model5.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

model5.fit(
    X_train, y_train,
    epochs=50,
    batch_size=128,
    validation_split=0.2
)

test_loss, test_accuracy = model5.evaluate(X_test, y_test)
print(f"Test Accuracy: {test_accuracy:.4f}")
print(f"Test Loss: {test_loss:.4f}")

from keras.saving import save_model
save_model(model5, 'lenet_mnist.keras')

"""visualisasi preddiksi"""

from sklearn.metrics import classification_report

y_pred = np.argmax(model5.predict(X_test), axis=1)
print(classification_report(y_test, y_pred))

import matplotlib.pyplot as plt

y_pred = np.argmax(model5.predict(X_test), axis=1)
wrong = np.where(y_pred != y_test)[0]

for i in range(5):
    idx = wrong[i]
    plt.imshow(X_test[idx].numpy().reshape(32, 32), cmap='gray')
    plt.title(f"Predicted: {y_pred[idx]}, Actual: {y_test[idx]}")
    plt.show()